version: "3.8"


services:
  frontend:
    build:
      context: ../frontend
      dockerfile: ../frontend/Dockerfile
      args:
        API_URL: "*"
    container_name: frontend
    volumes:
      - ./frontend:/frontend
      - build_folder:/frontend/dist
      - ./frontend/node_modules:/frontend/node_modules
    image: run
    tty: true

  nginx:
    build:
      context: nginx
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
#      - "443:443"
    volumes:
      - build_folder:/var/www/frontend

#      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
#      - ./certbot/conf:/etc/letsencrypt:rw
#      - ./certbot/www:/var/www/certbot:rw
    depends_on:
      - frontend
    expose:
      - '80'
#      - '443'
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
#    networks:
#      - app-tier

      #  mysqldb:
#    image: mysql:8.0
#    container_name: mysqldb
#    env_file:
#      - "./backend/db/.env"
#    ports:
#      - "3306:3306"
      #    platform: linux/amd64
      #    volumes:
      # - ./elk/logs/mysql_data:/var/var/log
    #      - ./backend/db/init/:/docker-entrypoint-initdb.d/
    # - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    # healthcheck:
    #   test: ["CMD", "mysqladmin", "ping", "-h", "mysqldb"]
    #   timeout: 20s
    #   retries: 10
    # command: ["--general-log", "--general-log-file=/var/log/mysql.log"]

  backend:
    build:
      context: ../backend
    container_name: backend
    command: >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate &&
             daphne -b 0.0.0.0 -p 8000 config.asgi:application"
    ports:
      - "8000:8000"
#    volumes:
##      - static_volume:/backend/staticfiles
##      - media_volume:/backend/mediafiles
#      - build_folder:/var/www/frontend
    expose:
      - "8000"
      #    networks:
    restart: always
    tty: true
#    depends_on:
#      - mysqldb

#
#
#
#  certbot:
#    image: certbot/certbot
#    restart: unless-stopped
#    volumes:
#      - ./certbot/conf:/etc/letsencrypt:rw
#      - ./certbot/www:/var/www/certbot:rw
#    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
#    depends_on:
#      - nginx

volumes:
   build_folder: {}
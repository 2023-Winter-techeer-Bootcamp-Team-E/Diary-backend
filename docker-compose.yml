version: "3.8"


services:

  db:
    image: mysql:8.0
    container_name: mysqldb
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: "haru"
      MYSQL_ROOT_PASSWORD: "12345678"

    volumes:
      - db_data:/var/lib/mysql

    #    healthcheck:
    #      test: [ "CMD", "mysql", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}", "-e", "SELECT 1" ]
    #      timeout: 20s
    #      retries: 10
    networks:
      - haru

    # 가상 네트워크 연결

  frontend: #프론트 엔드 서비스를 만듬
    build:
      context: ../frontend #프론트 엔드 소스코드는 이 경로에 있다.
      dockerfile: ../frontend/Dockerfile #빌드할때 프론트엔드 도커파일을 사용함.
      args:
        API_URL: "*"
    container_name: frontend
    volumes:
      - ./frontend:/frontend
      - build_folder:/frontend/dist
      - ./frontend/node_modules:/frontend/node_modules
    image: run
    tty: true
    networks:
      - haru

  nginx:
    build:
      context: nginx
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
    #      - "443:443"
    volumes:
      - build_folder:/var/www/frontend
      - ./nginx/logs:/var/log/nginx

    #      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    #      - ./certbot/conf:/etc/letsencrypt:rw
    #      - ./certbot/www:/var/www/certbot:rw
    depends_on:
      - frontend
    expose:
      - '80'
    #      - '443'
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      - haru


  backend:
    build:
      context: ../backend
      dockerfile: ../backend/Dockerfile
    container_name: backend
    command: >
      sh -c "python manage.py makemigrations &&
            python manage.py makemigrations member &&
            python manage.py makemigrations harucalendar &&
            python manage.py makemigrations diary &&
            python manage.py makemigrations guest &&
            python manage.py makemigrations static &&
            python manage.py migrate &&
            daphne -b 0.0.0.0 -p 8000 config.asgi:application"
    ports:
      - "8000:8000"
    #    volumes:
    ##      - static_volume:/backend/staticfiles
    ##      - media_volume:/backend/mediafiles
    #      - build_folder:/var/www/frontend
    expose:
      - "8000"
      #    networks:
    restart: always
    tty: true
    depends_on:
      - db
    networks:
      - haru



  rabbitmq:
    image: "rabbitmq:3.12.12-management"
    container_name: rabbitmq
    # command: rabbitmq-server
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
    ports:
      # Expose the port for the worker to add/get tasks
      - 5672:5672
      # OPTIONAL: Expose the GUI port
      - 15672:15672
    depends_on:
      - backend
    restart: always
    tty: true   # restart: unless-stopped??
    expose:
      - 5672
    networks:
      - haru

  celery:
    container_name: celery
    #    env_file:
    #      - ./settings/.env
    command: sh -c "celery -A config worker --loglevel=info"
    build:
      context: ../backend
      dockerfile: Dockerfile
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
    depends_on:
      - rabbitmq
      - backend
    restart: always
    tty: true
    networks:
      - haru


  redis:
    image: "redis:latest"
    container_name: redis
    ports:
      - "6379:6379"  # Redis 서버에 접근하기 위한 포트
    restart: always
    networks:
      - haru

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    restart: 'always'
    volumes:
      - ./prometheus:/etc/prometheus
      - ./prometheus/prometheus.yml:/prometheus/prometheus.yml:ro
    ports:
      - 9090:9090
    command:
      - '--web.enable-lifecycle'
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - haru

  grafana:
    container_name: grafana
    image: grafana/grafana
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
      GF_AUTH_ANONYMOUS_ENABLED: 'true'
      GF_AUTH_ANONYMOUS_ORG_ROLE: 'Admin'
      GF_AUTH_DISABLE_LOGIN_FORM: 'true'
    restart: 'always'
    volumes:
      - ./grafana:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    ports:
      - 3000:3000
    depends_on:
      - prometheus
    networks:
      - haru

#  nginx-prometheus-exporter:
#    image: nginx/nginx-prometheus-exporter:latest
#    ports:
#      - "9113:9113"
#    command:
#      - --nginx.scrape-uri=http://nginx:80/metrics
#      - --web.telemetry-path=/metrics
#    depends_on:
#      - nginx
#    networks:
#      - haru

  telegraf:
    image: telegraf:latest
    container_name: telegraf
    volumes:
      - ./telegraf.conf:/etc/telegraf/telegraf.conf:ro
    networks:
      - haru
    depends_on:
      - prometheus
    restart: always
    command: [ "telegraf", "--config", "/etc/telegraf/telegraf.conf" ]

networks:
  haru:
    driver: bridge


volumes:
  build_folder: { }
  db_data: { }

version: "3.8"


services:
  frontend: #프론트 엔드 서비스를 만듬
    build:
      context: ../frontend #프론트 엔드 소스코드는 이 경로에 있다.
      dockerfile: ../frontend/Dockerfile #빌드할때 프론트엔드 도커파일을 사용함.
      args:
        API_URL: "*"
    container_name: frontend
    volumes:
      - ./frontend:/frontend
      - build_folder:/frontend/dist
      - ./frontend/node_modules:/frontend/node_modules
    image: run
    tty: true
    networks:
      - haru

  nginx:
    build:
      context: nginx
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
    #      - "443:443"
    volumes:
      - build_folder:/var/www/frontend

    #      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    #      - ./certbot/conf:/etc/letsencrypt:rw
    #      - ./certbot/www:/var/www/certbot:rw
    depends_on:
      - frontend
    expose:
      - '80'
    networks:
      - haru
    #      - '443'
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
      #    networks:
      #      - app-tier

      #  mysqldb:
      #    image: mysql:8.0
      #    container_name: mysqldb
      #    env_file:
      #      - "./backend/db/.env"
      #    ports:
      #      - "3306:3306"
      #    platform: linux/amd64
    #    volumes:
    # - ./elk/logs/mysql_data:/var/var/log
    #      - ./backend/db/init/:/docker-entrypoint-initdb.d/
    # - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    # healthcheck:
    #   test: ["CMD", "mysqladmin", "ping", "-h", "mysqldb"]
    #   timeout: 20s
    #   retries: 10
    # command: ["--general-log", "--general-log-file=/var/log/mysql.log"]

  backend:
    build:
      context: ../backend
    container_name: backend
    command: >
      sh -c "python manage.py makemigrations &&
            python manage.py makemigrations member &&
            python manage.py makemigrations harucalendar &&
            python manage.py makemigrations diary &&
            python manage.py makemigrations guest &&
            python manage.py migrate &&
            daphne -b 0.0.0.0 -p 8000 config.asgi:application"
    ports:
      - "8000:8000"
    #    volumes:
    ##      - static_volume:/backend/staticfiles
    ##      - media_volume:/backend/mediafiles
    #      - build_folder:/var/www/frontend
    expose:
      - "8000"
      #    networks:
    restart: always
    tty: true
    networks:
      - haru
  #    depends_on:
  #      - mysqldb

  #
  #
  #
  #  certbot:
  #    image: certbot/certbot
  #    restart: unless-stopped
  #    volumes:
  #      - ./certbot/conf:/etc/letsencrypt:rw
  #      - ./certbot/www:/var/www/certbot:rw
  #    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
  #    depends_on:
  #      - nginx

  celery:
    container_name: celery
#    env_file:
#      - ./settings/.env
    command: sh -c "celery -A celery worker --loglevel=info"
    build:
      #context: ./backend
      dockerfile: Dockerfile
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
    depends_on:
      - rabbitmq
      - backend
    restart: always
    tty: true
    networks:
      - haru

  rabbitmq:
    image: "rabbitmq:3.9-management"
    container_name: rabbitmq
    # command: rabbitmq-server
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
    ports:
      # Expose the port for the worker to add/get tasks
      - 5672:5672
      # OPTIONAL: Expose the GUI port
      - 15672:15672
    depends_on:
      - backend
    restart: always   # restart: unless-stopped??
    tty: true
    expose:
      - 5672
    networks:
      - haru

  redis:
    image: "redis:latest"
    container_name: redis
    ports:
      - "6379:6379"  # Redis 서버에 접근하기 위한 포트
    restart: always
    networks:
      - haru

networks:
  haru:
    driver: bridge

volumes:
  build_folder: { }
